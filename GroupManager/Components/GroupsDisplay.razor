@using GroupManager.Constants;
@using GroupManager.Data.Models;

<div class="groups-display">
    <div class="groups-display__buttons">
        @foreach (var group in Groups)
        {
            <button Class="group-button mud-width-full @IsSelected(group)" @onclick="() => OnSelectedGroupChange.InvokeAsync(group)">
                <MudIcon Icon="@Icons.GroupsIconsList[group]" Title="@group"></MudIcon>
                @group
            </button>
        }
    </div>
    <div class="groups-display__drop-area">
        @ChildContent
    </div>
</div>

@code {
    private readonly GroupsIcons Icons = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectedGroupChange { get; set; }

    [Parameter]
    public List<string> Groups { get; set; } = new List<string>();

    [Parameter]
    public string CurrentGroup { get; set; } = string.Empty;

    private string IsSelected(string groupToCheck) => CurrentGroup == groupToCheck ? "group-button--selected" : "";
}